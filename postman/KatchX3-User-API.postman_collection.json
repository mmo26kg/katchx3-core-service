{
    "info": {
        "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
        "name": "KatchX3 User API",
        "description": "REST API collection for KatchX3 Core Service - User Management Module\n\nThis collection includes:\n- Health check endpoint\n- Complete CRUD operations for users\n- Query parameter examples (pagination, sorting, filtering)\n- Error handling scenarios\n- Environment variables for easy configuration",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "12345678"
    },
    "item": [
        {
            "name": "Health Check",
            "item": [
                {
                    "name": "Get Health Status",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response is OK\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.eql(\"OK\");",
                                    "});",
                                    "",
                                    "pm.test(\"Response time is less than 500ms\", function () {",
                                    "    pm.expect(pm.response.responseTime).to.be.below(500);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/health",
                            "host": ["{{baseUrl}}"],
                            "path": ["health"]
                        },
                        "description": "Check if the service is running and healthy"
                    },
                    "response": [
                        {
                            "name": "Healthy Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/health",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["health"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": true,\n    \"data\": \"OK\"\n}"
                        }
                    ]
                }
            ],
            "description": "Health check endpoints to verify service status"
        },
        {
            "name": "User Management",
            "item": [
                {
                    "name": "Create User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 201\", function () {",
                                    "    pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "pm.test(\"User created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('id');",
                                    "    pm.expect(jsonData.data.username).to.eql(pm.globals.get('testUsername'));",
                                    "    pm.expect(jsonData.data.email).to.eql(pm.globals.get('testEmail'));",
                                    "    ",
                                    "    // Store user ID for subsequent requests",
                                    "    pm.globals.set('createdUserId', jsonData.data.id);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has required fields\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('username');",
                                    "    pm.expect(jsonData.data).to.have.property('email');",
                                    "    pm.expect(jsonData.data).to.have.property('createdAt');",
                                    "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Generate unique test data",
                                    "const timestamp = Date.now();",
                                    "pm.globals.set('testUsername', `testuser${timestamp}`);",
                                    "pm.globals.set('testEmail', `test${timestamp}@example.com`);",
                                    "pm.globals.set('testPassword', 'password123');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\",\n    \"fullName\": \"Test User\",\n    \"phone\": \"+1234567890\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        },
                        "description": "Create a new user with required and optional fields"
                    },
                    "response": [
                        {
                            "name": "User Created Successfully",
                            "originalRequest": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\",\n    \"fullName\": \"John Doe\",\n    \"phone\": \"+1234567890\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users"]
                                }
                            },
                            "status": "Created",
                            "code": 201,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"username\": \"johndoe\",\n        \"email\": \"john@example.com\",\n        \"fullName\": \"John Doe\",\n        \"phone\": \"+1234567890\",\n        \"createdAt\": \"2025-09-13T07:30:00.000Z\",\n        \"updatedAt\": \"2025-09-13T07:30:00.000Z\"\n    }\n}"
                        }
                    ]
                },
                {
                    "name": "Get All Users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has correct structure\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('rows');",
                                    "    pm.expect(jsonData.data).to.have.property('count');",
                                    "    pm.expect(jsonData.data.rows).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test(\"Users array contains valid user objects\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    if (jsonData.data.rows.length > 0) {",
                                    "        const user = jsonData.data.rows[0];",
                                    "        pm.expect(user).to.have.property('id');",
                                    "        pm.expect(user).to.have.property('username');",
                                    "        pm.expect(user).to.have.property('email');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        },
                        "description": "Get list of all users with pagination support"
                    },
                    "response": [
                        {
                            "name": "Users List Response",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": true,\n    \"data\": {\n        \"rows\": [\n            {\n                \"id\": 1,\n                \"username\": \"johndoe\",\n                \"email\": \"john@example.com\",\n                \"fullName\": \"John Doe\",\n                \"phone\": \"+1234567890\",\n                \"createdAt\": \"2025-09-13T07:30:00.000Z\",\n                \"updatedAt\": \"2025-09-13T07:30:00.000Z\"\n            }\n        ],\n        \"count\": 1\n    }\n}"
                        }
                    ]
                },
                {
                    "name": "Get Users with Pagination",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Pagination works correctly\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data.rows.length).to.be.at.most(5); // pageSize=5",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users?page=1&pageSize=5",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"],
                            "query": [
                                {
                                    "key": "page",
                                    "value": "1",
                                    "description": "Page number (1-based)"
                                },
                                {
                                    "key": "pageSize",
                                    "value": "5",
                                    "description": "Number of items per page"
                                }
                            ]
                        },
                        "description": "Get users with pagination parameters"
                    }
                },
                {
                    "name": "Get Users with Sorting",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response structure is correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('rows');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users?sort=username,-createdAt",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"],
                            "query": [
                                {
                                    "key": "sort",
                                    "value": "username,-createdAt",
                                    "description": "Sort by username ASC, then createdAt DESC"
                                }
                            ]
                        },
                        "description": "Get users sorted by username ascending and createdAt descending"
                    }
                },
                {
                    "name": "Get Users with Filtering",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users?username={{testUsername}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"],
                            "query": [
                                {
                                    "key": "username",
                                    "value": "{{testUsername}}",
                                    "description": "Filter by username"
                                }
                            ]
                        },
                        "description": "Get users filtered by username"
                    }
                },
                {
                    "name": "Get Users with Field Selection",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users?fields=id,username,email",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"],
                            "query": [
                                {
                                    "key": "fields",
                                    "value": "id,username,email",
                                    "description": "Select only specific fields"
                                }
                            ]
                        },
                        "description": "Get users with only selected fields (id, username, email)"
                    }
                },
                {
                    "name": "Get User by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User details are correct\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('id');",
                                    "    pm.expect(jsonData.data).to.have.property('username');",
                                    "    pm.expect(jsonData.data).to.have.property('email');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{createdUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{createdUserId}}"]
                        },
                        "description": "Get a specific user by their ID"
                    },
                    "response": [
                        {
                            "name": "User Found",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users/1",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users", "1"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"username\": \"johndoe\",\n        \"email\": \"john@example.com\",\n        \"fullName\": \"John Doe\",\n        \"phone\": \"+1234567890\",\n        \"createdAt\": \"2025-09-13T07:30:00.000Z\",\n        \"updatedAt\": \"2025-09-13T07:30:00.000Z\"\n    }\n}"
                        }
                    ]
                },
                {
                    "name": "Update User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User updated successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data.fullName).to.eql('Updated Test User');",
                                    "    pm.expect(jsonData.data.phone).to.eql('+9876543210');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"fullName\": \"Updated Test User\",\n    \"phone\": \"+9876543210\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/{{createdUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{createdUserId}}"]
                        },
                        "description": "Update user information"
                    },
                    "response": [
                        {
                            "name": "User Updated",
                            "originalRequest": {
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"fullName\": \"John Smith\",\n    \"phone\": \"+9876543210\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users/1",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users", "1"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": true,\n    \"data\": {\n        \"id\": 1,\n        \"username\": \"johndoe\",\n        \"email\": \"john@example.com\",\n        \"fullName\": \"John Smith\",\n        \"phone\": \"+9876543210\",\n        \"createdAt\": \"2025-09-13T07:30:00.000Z\",\n        \"updatedAt\": \"2025-09-13T07:35:00.000Z\"\n    }\n}"
                        }
                    ]
                },
                {
                    "name": "Delete User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"User deleted successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.eql(true);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/{{createdUserId}}",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "{{createdUserId}}"]
                        },
                        "description": "Delete a user by ID"
                    },
                    "response": [
                        {
                            "name": "User Deleted",
                            "originalRequest": {
                                "method": "DELETE",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users/1",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users", "1"]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": true,\n    \"data\": true\n}"
                        }
                    ]
                }
            ],
            "description": "Complete CRUD operations for user management"
        },
        {
            "name": "Error Scenarios",
            "item": [
                {
                    "name": "Get Non-existent User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error response format\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(false);",
                                    "    pm.expect(jsonData.message).to.include('not found');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/99999",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "99999"]
                        },
                        "description": "Try to get a user that doesn't exist"
                    },
                    "response": [
                        {
                            "name": "User Not Found",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{baseUrl}}/users/99999",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users", "99999"]
                                }
                            },
                            "status": "Not Found",
                            "code": 404,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": false,\n    \"data\": null,\n    \"message\": \"User not found\"\n}"
                        }
                    ]
                },
                {
                    "name": "Create User with Invalid Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error response format\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(false);",
                                    "    pm.expect(jsonData).to.have.property('error');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users",
                            "host": ["{{baseUrl}}"],
                            "path": ["users"]
                        },
                        "description": "Try to create a user with invalid data"
                    },
                    "response": [
                        {
                            "name": "Validation Error",
                            "originalRequest": {
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\n    \"username\": \"\",\n    \"email\": \"invalid-email\",\n    \"password\": \"\"\n}"
                                },
                                "url": {
                                    "raw": "{{baseUrl}}/users",
                                    "host": ["{{baseUrl}}"],
                                    "path": ["users"]
                                }
                            },
                            "status": "Bad Request",
                            "code": 400,
                            "_postman_previewlanguage": "json",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                }
                            ],
                            "cookie": [],
                            "body": "{\n    \"success\": false,\n    \"data\": null,\n    \"message\": \"Failed to create user\",\n    \"error\": \"Validation error details\"\n}"
                        }
                    ]
                },
                {
                    "name": "Update Non-existent User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error response format\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(false);",
                                    "    pm.expect(jsonData.message).to.include('not found');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"fullName\": \"Updated Name\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/users/99999",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "99999"]
                        },
                        "description": "Try to update a user that doesn't exist"
                    }
                },
                {
                    "name": "Delete Non-existent User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error response format\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(false);",
                                    "    pm.expect(jsonData.message).to.include('not found');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/users/99999",
                            "host": ["{{baseUrl}}"],
                            "path": ["users", "99999"]
                        },
                        "description": "Try to delete a user that doesn't exist"
                    }
                }
            ],
            "description": "Test error handling scenarios and edge cases"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": ["// Global pre-request script", "// Add any global setup logic here"]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": ["// Global test script", "// Add any global test assertions here"]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:3000",
            "type": "string",
            "description": "Base URL for the KatchX3 API"
        },
        {
            "key": "apiVersion",
            "value": "v1",
            "type": "string",
            "description": "API version"
        }
    ]
}
